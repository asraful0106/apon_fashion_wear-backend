// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma migrate dev --name changedName  ---> to migrate into db

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// -----------------------------------Category and Subcategory -----------------------------------
model Category {
  category_id    Int    @id @default(autoincrement())
  category_name  String
  category_image String

  // Relations
  sub_categories SubCategory[]
  products       Product[]
}

model SubCategory {
  sub_category_id    Int    @id @default(autoincrement())
  sub_category_name  String
  sub_category_image String
  category_id        Int

  // Relations
  category Category  @relation(fields: [category_id], references: [category_id])
  products Product[]
}

// ----------------------Product----------------------------
model Product {
  product_id      String   @id @default(uuid())
  name            String
  description     String
  price           Decimal  @db.Decimal(10, 2)
  offer_price     Decimal? @db.Decimal(10, 2)
  accept_preorder Boolean  @default(false)
  is_fetured      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  colors          Color[]
  category_id     Int?
  sub_category_id Int?
  category        Category?    @relation(fields: [category_id], references: [category_id])
  subCategory     SubCategory? @relation(fields: [sub_category_id], references: [sub_category_id])
  reviews         Review[]
}

// ----------------------Product Color Table---------------------------- 
model Color {
  color_id   Int     @id @default(autoincrement())
  name       String
  product_id String
  product    Product @relation(fields: [product_id], references: [product_id], onDelete: Cascade)

  // Relations
  images      Image[]
  inventories Inventory[]
}

// ----------------------Product Image Table----------------------------
model Image {
  image_id  Int    @id @default(autoincrement())
  image_url String

  // Relation
  color_id Int
  color    Color @relation(fields: [color_id], references: [color_id], onDelete: Cascade)
}

// ----------------------Product Inventory Table----------------------------
model Inventory {
  inventory_id     Int @id @default(autoincrement())
  product_quantity Int

  // Relations
  color_id Int
  color    Color @relation(fields: [color_id], references: [color_id], onDelete: Cascade)
  size_id  Int
  size     Size  @relation(fields: [size_id], references: [size_id])
}

// ----------------------Product Size Table----------------------------
model Size {
  size_id     Int         @id @default(autoincrement())
  name        String
  inventories Inventory[]
}

// ----------------------Review Table----------------------------
model Review {
  review_id  Int      @id @default(autoincrement())
  rating     Int
  user_id    String
  product_id String
  comment    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [user_id], references: [user_id])
  product Product @relation(fields: [product_id], references: [product_id])
}

// ---------------------------Hero Section and Banner Section----------------------
// Banaer Table
model Banner {
  banner_id    Int    @id @default(autoincrement())
  banner_image String
}

// ----------------------------User features-------------------------------
// User Table
model User {
  user_id                  String   @id @default(uuid())
  name                     String
  phone_number             String
  email                    String
  password_hash            String
  image                    String?
  isVarified               Boolean  @default(false)
  is_valid_password_change Boolean  @default(false)
  role                     Role     @default(user)
  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt

  // Relationship
  addresses Address[]
  reviews   Review[]
}

// enum for User role
enum Role {
  user
  admin
  selsman
}

// Address table
model Address {
  id           String  @id @default(uuid())
  address_name String //e.g. home, office, etc.
  address      String
  isDeafult    Boolean @default(false)
  user_id      String

  //  Relation
  user User @relation(fields: [user_id], references: [user_id])
}

// Otp table
